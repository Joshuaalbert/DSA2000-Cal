# Folder structure of container:
# /data has MS files
# /run has skymodel and such
# /logs has logs
# /gains has solutions

# columns that exist: UVW FLAG FLAG_CATEGORY WEIGHT SIGMA ANTENNA1 ANTENNA2 ARRAY_ID DATA_DESC_ID EXPOSURE FEED1 FEED2 FIELD_ID FLAG_ROW INTERVAL OBSERVATION_ID PROCESSOR_ID SCAN_NUMBER STATE_ID TIME TIME_CENTROID DATA
input_ms:
  path: /dsa/output/input.ms
  data_column: DATA
  weight_column: WEIGHT
  time_chunk: 4 # Controls how much RAM is used, can be unit or number per chunk
  freq_chunk: 32 # can be unit or number per chunk, 0 is all
#  select_corr: [ 0,1,2,3 ] # All correlations
#  select_fields: [ 0 ]
#  select_ddids: [ 0 ] # spectral windows of MS

input_model:
  recipe: /dsa/output/skymodel.lsm.html
#  source_chunks: 1 # big impact on RAM

output:
  gain_directory: /dsa/output/gains
  log_directory: /dsa/output/logs
  log_to_terminal: True
  overwrite: True
#  products: [ corrected_residual ]
#  columns: [ CORRECTED_DATA ] # one for each product
  flags: True

dask:
  threads: 0 # Setting to zero (the default) will use all available resources.
  scheduler: "threads" # Apparently "threads" is best for single-node use. "multiprocessing" would be the other.

solver:
  terms: [ "G" ]
  iter_recipe: [ 1000 ] # Using a zero would just "interpolate" the solutions into appropriate gains, e.g. G (independent) -> dE (dependent)
  propagate_flags: True
  robust: False # reweight visibilties using residuals (or something) Ask about it.
  threads: 32 # The total number of threads used will be dask.threads*solver.threads; if this product exceeds the number of available threads, performance will suffer.
#  convergence_criteria: 1e-8 # Like x_tol. The change in the value of the gain below which it considered to have converged. Set to zero to iterate for the number of interations specified in solver.iter_recipe.
#  convergence_fraction: 1.0 # The fraction of gain values which must converge before a solver will exit prematurely.
  reference_antenna: 0 # reference antenna. No gaurantee that it'll be zero.

G:
  type: phase
  time_interval: "4"
  freq_interval: "32"